@page "/signin"
@using System.Security.Cryptography
@using System.Text
@using Blazored.SessionStorage

@inject ISessionStorageService SessionStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbHelper DbHelper
@inject IJSRuntime jsr
@inject NavigationManager nav
@inject ISnackbar snack


<style>
    body {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
    }

    .signin-container {
        width: 400px;
        padding: 20px;
        border-radius: 10px;
        background: #fff;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        margin: 60px auto; /* Centering the container */
    }

    h3 {
        text-align: center;
        margin-bottom: 20px;
        color: #333;
    }

    label {
        font-weight: bold;
        display: block;
        margin-bottom: 5px;
    }

    .input-field {
        width: calc(100% - 22px);
        padding: 10px;
        margin-bottom: 15px;
        border: 1px solid #ccc;
        border-radius: 5px;
        box-sizing: border-box;
    }

    button[type="submit"] {
        width: 100%;
        padding: 10px;
        border: none;
        border-radius: 5px;
        background-color: #007bff;
        color: #fff;
        font-size: 16px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        button[type="submit"]:hover {
            background-color: #0056b3;
        }

    .validation-error {
        color: #dc3545;
        margin-top: 5px;
    }
</style>

<div class="signin-container">
    <h3>Sign In</h3>

    <EditForm Model="loginModel" OnValidSubmit="HandleSignIn">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label>Username or Email:</label>
            <InputText @bind-Value="loginModel.Username" class="input-field" />
        </div>
        <div>
            <label>Password:</label>
            <InputText @bind-Value="loginModel.Password" type="password" class="input-field" />
        </div>

        <button type="submit">Sign In</button>
    </EditForm>
</div>

@code {
    private LoginModel loginModel = new LoginModel();

    private async Task HandleSignIn()
    {
        // Retrieve the user from the database
        var user = await DbHelper.GetUserByEmailOrName(loginModel.Username);

        if (user != null)
        {
            // Hash the provided password with the retrieved salt
            var hashedPassword = HashPassword(loginModel.Password, user.salt);

            // Compare the hashes
            if (user.password == hashedPassword)
            {
                try
                {
                    await SessionStorage.SetItemAsync("token", user.jwt_token);
                    ((CustomAuthenticationStateProvider)AuthenticationStateProvider).AuthenticateUser(user.jwt_token!);

                    nav.NavigateTo("/");
                }
                catch (Exception ex)
                {
                    snack.Add($"Error registering user: {ex.Message}", Severity.Error);
                }
            }
            else
            {
                snack.Add("Wrong Password", Severity.Error);
            }
        }
        else
        {
            snack.Add("Unable to Sign In, Please try again.", Severity.Error);
        }
    }

    private string HashPassword(string password, string salt)
    {
        using (var sha256 = SHA256.Create())
        {
            var saltedPassword = $"{salt}:{password}";
            var saltedPasswordBytes = Encoding.UTF8.GetBytes(saltedPassword);
            var hashBytes = sha256.ComputeHash(saltedPasswordBytes);
            return Convert.ToBase64String(hashBytes);
        }
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}
